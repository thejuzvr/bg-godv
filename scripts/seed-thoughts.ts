import 'dotenv/config';
import { drizzle } from 'drizzle-orm/node-postgres';
import pkg from 'pg';
const { Pool } = pkg;
import { gameThoughts } from '../shared/schema.js';

// Optional: reuse known location IDs for conditions
import { initialLocations } from '../src/data/locations.js';

type ThoughtSeed = {
  id: string;
  text: string;
  tags?: string[] | null;
  conditions?: Record<string, any> | null;
  weight?: number;
  cooldownKey?: string | null;
  locale?: string;
  isEnabled?: boolean;
};

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

const db = drizzle(pool);

function pick<T>(arr: T[]): T {
  return arr[Math.floor(Math.random() * arr.length)];
}

function makeId(prefix: string, idx: number): string {
  return `${prefix}_${String(idx + 1).padStart(2, '0')}`;
}

const cityIds = initialLocations.filter(l => l.type === 'city' || l.type === 'town').map(l => l.id);

const humorLines: string[] = [
  '–°–µ–≥–æ–¥–Ω—è —è –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª –ù–∞–∑–∏–º–∞. –ö–∞–∂–µ—Ç—Å—è, —Å—É–¥—å–±–∞ –∫–æ –º–Ω–µ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞.',
  '–í–µ–¥—Ä–æ –Ω–∞ –≥–æ–ª–æ–≤–µ ‚Äî —ç—Ç–æ –º–æ–¥–Ω–æ. –Ø –¥–∏–∑–∞–π–Ω–µ—Ä, —è —Ç–∞–∫ –≤–∏–∂—É.',
  '–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª –µ—â—ë –æ–¥–∏–Ω –∫–∞—Ä–º–∞–Ω ‚Äî —è –±—ã –ø–æ–ª–æ–∂–∏–ª —Ç—É–¥–∞ –µ—â—ë –æ–¥–∏–Ω —Å—ã—Ä.',
  '–ö—É—Ä–∏—Ü–∞ —Å–º–æ—Ç—Ä–∏—Ç –æ—Å—É–∂–¥–∞—é—â–µ. –Ø –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª. –í —ç—Ç–æ—Ç —Ä–∞–∑.',
  '–§—É—Å –†–æ –î–∞‚Ä¶ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –≥–æ–ª–æ–≤–µ. –ù–æ –∑–≤—É—á–∏—Ç –º–æ—â–Ω–æ!',
  '–°–ª–∞–¥–∫–∏–µ –±—É–ª–æ—á–∫–∏ ‚Äî —Ç–æ–ø–ª–∏–≤–æ –¥—Ä–∞–∫–æ–Ω—å–∏—Ö –¥—É—à.',
  '–ì–¥–µ-—Ç–æ —Ä—è–¥–æ–º –ú\'–ê–π–∫. –û–Ω –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç. –ù–æ –Ω–µ —Å–∫–∞–∂–µ—Ç.',
  '–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é —Å–ø–∞—Å –º–∏—Ä, –Ω–æ —É –º–µ–Ω—è –≤—Å—Ç—Ä–µ—á–∞ —Å –ø–µ–∫–∞—Ä–µ–º.',
  '–ö–∞–∂–µ—Ç—Å—è, —è —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–ø—É—Ç–∞–ª healing potion —Å –∑–µ–ª—å–µ–º –≤–µ—Å–∞. –ë—ã–≤–∞–µ—Ç.',
  '–£ –∫–æ–≥–æ-—Ç–æ —Å—Ç—Ä–µ–ª—ã –≤ –∫–æ–ª–µ–Ω–µ. –£ –º–µ–Ω—è ‚Äî —Å—ã—Ä –≤ —Å—É–º–∫–µ. –ö–∞–∂–¥—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ—ë.',
  '–¢–∞–ª–º–æ—Ä—Ü—ã –æ–ø—è—Ç—å —Å–º–æ—Ç—Ä—è—Ç. –ü–æ–∂–∞–ª—É–π, –Ω–∞–¥–µ–Ω—É –≤–µ–¥—Ä–æ –∏ —Å–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –º–µ–Ω—è –Ω–µ—Ç.',
  '–ö–∞–∫ –∂–µ —Ç—è–∂–µ–ª–æ –±—ã—Ç—å –≥–µ—Ä–æ–µ–º. –û—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–Ω–∞.',
  '–°—É–¥—å–±–∞ –∑–æ–≤—ë—Ç. –ù–æ —Ç–∞–≤–µ—Ä–Ω–∞ –∑–æ–≤—ë—Ç –≥—Ä–æ–º—á–µ.',
  '–°—ã—Ä ‚Äî —ç—Ç–æ –∫—Ä—É–≥–ª–∞—è —Ä–∞–¥–æ—Å—Ç—å. –û—Å–æ–±–µ–Ω–Ω–æ —Å–æ—Ä–æ–∫ —Å–µ–¥—å–º–æ–π –ø–æ —Å—á—ë—Ç—É.',
  '–ï—Å–ª–∏ —è –Ω–∞–¥–µ–Ω—É –¥–≤–∞ –≤–µ–¥—Ä–∞ –Ω–∞ –≥–æ–ª–æ–≤—É ‚Äî —Å—Ç–∞–Ω—É –ª–∏ —è –≤–¥–≤–æ–µ —É–º–Ω–µ–µ?',
  '–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–ª–∞–Ω: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–µ—Å—Ç—å. –ü–æ—Ç–æ–º –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è.',
  '–°–ª–∞–¥–∫–∏–π —Ä—É–ª–µ—Ç ‚Äî –¥–æ—Å—Ç–æ–π–Ω–∞—è —Ü–µ–ª—å –ª—é–±–æ–≥–æ –∫–≤–µ—Å—Ç–∞.',
  '–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä–∏—Ü–µ –≤ –≥–ª–∞–∑–∞. –û–Ω–∞ –ø–æ–º–Ω–∏—Ç.',
  '–Ø —Å–ª—ã—à–∞–ª —à—ë–ø–æ—Ç –±–æ–≥–æ–≤. –û–Ω–∏ —Å–∫–∞–∑–∞–ª–∏: ¬´–µ—â—ë —Å—ã—Ä¬ª.',
  '–•–∞! –ï—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ —Å—Ç—Ä–µ–ª—ã –≤ –∫–æ–ª–µ–Ω–µ ‚Äî —É–∂–µ –ø–æ–±–µ–¥–∞.',
  '–ú–æ–π –∫–æ–º–ø–∞–Ω—å–æ–Ω —Å–Ω–æ–≤–∞ –ø–æ—Ç–µ—Ä—è–ª—Å—è‚Ä¶ –≥–¥–µ-—Ç–æ –º–µ–∂–¥—É –¥–≤–µ—Ä—å–º–∏ –∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é.',
  '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ —è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –≤—Å—ë —ç—Ç–æ. –î–∞–∂–µ –ø–∞–¥–µ–Ω–∏–µ —Å –∫—Ä—ã—à–∏.',
  '–°–ª–æ–≤–æ —Å–∏–ª—ã ¬´–£–±–æ—Ä–∫–∞¬ª –º–Ω–µ –±—ã –Ω–µ –ø–æ–º–µ—à–∞–ª–æ. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Ö–∞–æ—Å.',
  '–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç, –µ—Å–ª–∏ –±—É–ª–æ—á–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç. –ù–∏–∫—Ç–æ.',
  '–°—Ç—Ä–∞–∂–∞ —Å–∫–∞–∑–∞–ª–∞ ¬´–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å!¬ª. –Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è. –ì–µ—Ä–æ–π –∂–µ –∑–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã–π.',
];

const memeLines: string[] = [
  '–§—É—Å‚Ä¶ –†–æ‚Ä¶ –î–∞! (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ) ‚Äî –∫–æ–≥–¥–∞ –≤–∏–¥–∏—à—å –≥–æ—Ä—É —Å—ã—Ä–∞.',
  '–ú\'–ê–π–∫ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ü—Ä–∞–≤–¥–∞ —Å–ª–æ–∂–Ω–∞¬ª. –û—Å–æ–±–µ–Ω–Ω–æ –±–µ–∑ –∫–∞—Ä—Ç—ã.',
  '–í –û–±–ª–∞—á–Ω–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ —è –±—ã–≤–∞—é. –Ø –ë–´–í–ê–Æ, –ù–∞–∑–∏–º!',
  '–î–æ–≤–∞–∫–∏–Ω, –î–æ–≤–∞–∫–∏–Ω‚Ä¶ –∞ –æ–±–µ–¥ –∫–æ–≥–¥–∞?',
  '–¢–æ–º–∞—Å –ü–æ—Ä–æ–≤–æ–∑–∏–∫-–¥—Ä–∞–∫–æ–Ω? –ú–Ω–µ —ç—Ç–æ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å‚Ä¶ –Ω–∞–¥–µ—é—Å—å.',
  '–°—Ç—Ä–∞–∂–Ω–∏–∫: ¬´–ë—ã–ª –±—ã —è –Ω–∞ —Ç–≤–æ—ë–º –º–µ—Å—Ç–µ‚Ä¶¬ª ‚Äî –Ω–µ—Ç, –Ω–µ –Ω–∞–¥–æ.',
  '–°–≤–∏—Ç–∫–∏ –¥—Ä–µ–≤–Ω–∏—Ö ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –≥–¥–µ –±—É–ª–æ—á–∫–∏?',
  '¬´–≠—Ç–æ –Ω–µ –±–∞–≥ ‚Äî —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ù–∏—Ä–Ω–∞¬ª, ‚Äî —Å–∫–∞–∑–∞–ª –ú\'–ê–π–∫ –∏ –∏—Å—á–µ–∑.',
  '–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª –º–æ–¥ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –≤ —Å—É–º–∫–µ‚Ä¶ —ç—Ö.',
  '–®–µ–æ–≥–æ—Ä–∞—Ç –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –¥–æ–≤–æ–ª–µ–Ω –º–æ–µ–π –∂–∏–∑–Ω—å—é. –Ø ‚Äî –Ω–µ—Ç.',
  '–ü–æ–∫–æ—Ä–º–∏—Ç—å –∫–∞—Ä–º–∞–Ω–Ω–æ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ–ª—å–∑—è. –ñ–∞–ª—å.',
  '–ö–∞–∂–µ—Ç—Å—è, —è —Å–ª—É—á–∞–π–Ω–æ –∂–µ–Ω–∏–ª—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–∫–µ. –ò–ª–∏ —ç—Ç–æ —Å–æ–Ω?',
  '–°—Ç—É–∫ –ø–æ —Å—Ç–æ–ª—É: ¬´–ì–¥–µ –º–æ–π –∫—Ä–∏–∫?¬ª. –≠—Ö–æ –æ—Ç–≤–µ—á–∞–µ—Ç: ¬´–í –æ—á–µ—Ä–µ–¥–∏¬ª.',
  '–°–≤–∏—Ç–∫–∏ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —Å—É–¥—å–±–∞ –ø—Ä–µ–¥—Ä–µ—à–µ–Ω–∞. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–≤–µ—Ä–Ω—É –Ω–∞–ª–µ–≤–æ.',
  '–î—Ä–∞–∫–æ–Ω—ã ‚Äî —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –æ–ø–∞—Å–Ω–æ. –ù–æ —Ü–µ–Ω—ã –≤ —Ç–∞–≤–µ—Ä–Ω–µ ‚Äî —Å—Ç—Ä–∞—à–Ω–µ–µ.',
  '–ö–∞–¥–∂–∏—Ç —Å —Ç–æ–≤–∞—Ä–æ–º –≥–¥–µ-—Ç–æ —Ä—è–¥–æ–º. –ù–∞–¥–µ—é—Å—å, –Ω–µ —Å –º–æ–µ–π —Å—É–º–∫–æ–π.',
  '–í–æ—Ä–æ–Ω–∫–∞ –±–∞–≥–æ–≤ –ø–æ–≥–ª–æ—Ç–∏–ª–∞ –º–æ–µ–≥–æ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞. –ú–∏–Ω—É—Ç–æ–π –º–æ–ª—á–∞–Ω–∏—è –ø–æ—á—Ç–∏–º.',
  '–ö—É—Ä–∏—Ü—ã ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –ª–æ—Ä–∞. –ù–∏–∫–æ–≥–¥–∞ –∏—Ö –Ω–µ –∑–ª–∏.',
  '–¢–∞–ª–æ—Å —Å–æ –º–Ω–æ–π‚Ä¶ –Ω–∞–¥–µ—é—Å—å.',
  '–ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å. –ê –Ω–æ–≥–∏ ‚Äî –≤ —Å—Ç–æ—Ä–æ–Ω—É –∫—É—Ö–Ω–∏.',
  '–ë–∞–≥ —Å –ª–µ—Å—Ç–Ω–∏—Ü–µ–π? –Ø —Ç–∞–∫ –∏ –¥—É–º–∞–ª.',
  '–°–≤–∏—Ç–æ–∫ –Ω–∞ ¬´—Ä–∞–∑–≤–µ—Å—ë–ª—ã–π —Ç–∞–Ω–µ—Ü¬ª? –ì–¥–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?',
  '–î—Ä–∞–∫–æ–Ω –∫—Ä–∏—á–∞–ª, —è –∫—Ä–∏—á–∞–ª, –≤—Å–µ –∫—Ä–∏—á–∞–ª–∏. –í–µ—Å–µ–ª–æ –±—ã–ª–æ.',
  '–ú–æ–π –∫–æ–Ω—å ‚Äî –∞–ª—å–ø–∏–Ω–∏—Å—Ç. –Ø ‚Äî –Ω–µ –æ—á–µ–Ω—å.',
  '–°–ø—Ä—è—Ç–∞–ª—Å—è –≤ –≤–µ–¥—Ä–µ. –ú–µ–Ω—è —Ç–æ—á–Ω–æ –Ω–µ –≤–∏–¥–Ω–æ.',
];

const normalLines: string[] = [
  '–¢–∏—Ö–∏–π –¥–µ–Ω—å. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≤–µ—Å—Ç–∏ –º—ã—Å–ª–∏ –≤ –ø–æ—Ä—è–¥–æ–∫.',
  '–î–æ—Ä–æ–≥–∞ –∑–æ–≤—ë—Ç. –ò–¥—É, –ø–æ–∫–∞ –Ω–µ —Å—Ç–µ–º–Ω–µ–ª–æ.',
  '–°–Ω–µ–≥ —Ö—Ä—É—Å—Ç–∏—Ç –ø–æ–¥ –Ω–æ–≥–∞–º–∏, –≤–æ–∑–¥—É—Ö —Å–≤–µ–∂–∏–π –∏ –±–æ–¥—Ä–∏—Ç.',
  '–î–æ–∂–¥—å —Å—Ç—É—á–∏—Ç –ø–æ –ø–ª–∞—â—É. –ù–∞–¥–æ –±—ã –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ.',
  '–í–µ—á–µ—Ä–µ–ª–æ. –ü–æ—Ä–∞ –ø–æ–¥—É–º–∞—Ç—å –æ –Ω–æ—á–ª–µ–≥–µ.',
  '–í –≥–æ—Ä–æ–¥–µ —Å–ø–æ–∫–æ–π–Ω–æ. –ú–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –¥–µ–ª–∞–º–∏.',
  '–°—É–º–∫–∞ —Ç—è–∂—ë–ª–∞—è, –Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤—Å—ë. –ù–∞–≤–µ—Ä–Ω–æ–µ.',
  '–®–µ—Ä—Å—Ç—å –ø–ª–∞—â–∞ –ø–∞—Ö–Ω–µ—Ç –¥—ã–º–æ–º. –í—á–µ—Ä–∞—à–Ω–∏–π –∫–æ—Å—Ç—ë—Ä –±—ã–ª —Ç—ë–ø–ª—ã–º.',
  '–ü—É—Ç—å –ø—Ä—è–º–æ–π, –Ω–æ –º—ã—Å–ª–∏ –ø–µ—Ç–ª—è—é—Ç.',
  '–•–æ—Ä–æ—à–æ –±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã –∑–µ–ª–∏–π.',
  '–ù—É–∂–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å –∑–∞–≥–ª—è–Ω—É—Ç—å –∫ –∫—É–∑–Ω–µ—Ü—É.',
  '–û—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∑–¥–µ—Å—å –Ω–∞ –º–∏–Ω—É—Ç—É. –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–µ–±–æ.',
  '–®–∞–≥–∏ –æ—Ç–¥–∞—é—Ç—Å—è —ç—Ö–æ–º –≤ —Ä—É–∏–Ω–∞—Ö.',
  '–¢—É–º–∞–Ω —É–∫—Ä—ã–≤–∞–µ—Ç —Ö–æ–ª–º—ã. –í—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç –∏–Ω–∞—á–µ.',
  '–°–µ—Ä–¥—Ü–µ –±—å—ë—Ç—Å—è —Ä–æ–≤–Ω–æ. –í–ø–µ—Ä—ë–¥, –∫ –Ω–æ–≤—ã–º –≤—Å—Ç—Ä–µ—á–∞–º.',
  '–ï—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å ‚Äî –µ—â—ë —à–∞–≥ –∫ —Ü–µ–ª–∏.',
  '–°–≤–µ—Ç —Ñ–∞–∫–µ–ª–∞ –ø–ª—è—à–µ—Ç –Ω–∞ —Å—Ç–µ–Ω–∞—Ö. –¢–µ–Ω–∏ –∂–∏–≤—É—Ç —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.',
  '–õ—ë–≥–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–∂–∏—Ç—Å—è.',
  '–°–Ω–µ–≥–æ–ø–∞–¥ –∑–∞—Ç–∏—Ö–∞–µ—Ç. –î–æ—Ä–æ–≥–∞ –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç–∞.',
  '–í–¥–æ–ª—å –¥–æ—Ä–æ–≥–∏ —Å–ª—ã—à–Ω—ã –ø–µ—Å–Ω–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.',
  '–ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ–≥–Ω–∏ –∫–∞–∂—É—Ç—Å—è –±–ª–∏–∑–∫–æ. –°–∫–æ—Ä–æ –±—É–¥—É —Ç–∞–º.',
  '–°–µ–≥–æ–¥–Ω—è –æ–±–æ–π–¥—É—Å—å –±–µ–∑ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –ü—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫.',
  '–í–µ—Ç–µ—Ä –Ω–µ—Å—ë—Ç –∑–∞–ø–∞—Ö —Ö–≤–æ–∏ –∏ —Å–≤–µ–∂–µ—Å—Ç–∏.',
  '–î–∞–ª—ë–∫–∏–π –≥—Ä–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å–∫–æ—Ä–æ–º –¥–æ–∂–¥–µ.',
  '–ù–∞–¥–æ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä—É –º—ã—Å–ª–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫.',
];

// Helper to attach diverse conditions to lines cyclically
const conditionsPool: Array<Record<string, any>> = [
  { status: ['idle'], timeOfDay: ['day'] },
  { status: ['busy'], timeOfDay: ['evening'] },
  { weather: ['Rain'] },
  { weather: ['Snow'] },
  { hpBelow: 0.3 },
  { locations: [pick(cityIds)] },
  { season: ['Winter'] },
  { season: ['Summer'] },
  { timeOfDay: ['night'] },
  { factionsAny: ['companions'] },
  { questFlagsAny: ['sovngarde_active'] },
  { questFlagsAny: ['completed:main_started'] },
];

function buildSeeds(): ThoughtSeed[] {
  const seeds: ThoughtSeed[] = [];
  const pushBatch = (prefix: string, lines: string[], tag: string | null) => {
    lines.forEach((text, i) => {
      const idx = seeds.length;
      const cond = conditionsPool[idx % conditionsPool.length];
      seeds.push({
        id: makeId(prefix, i),
        text,
        tags: tag ? [tag] : [],
        conditions: cond,
        weight: 1 + (idx % 3),
        cooldownKey: null,
        locale: 'ru',
        isEnabled: true,
      });
    });
  };

  pushBatch('humor', humorLines, 'meme');
  pushBatch('meme', memeLines, 'skyrim_meme');
  pushBatch('normal', normalLines, 'generic');

  // If total < 70, add extra derived lines
  while (seeds.length < 70) {
    const idx = seeds.length;
    const cond = conditionsPool[idx % conditionsPool.length];
    seeds.push({
      id: makeId('extra', idx),
      text: `–ú—ã—Å–ª—å ‚Ññ${idx + 1}: —Ç–∏—Ö–∞—è —Ä–µ—à–∏–º–æ—Å—Ç—å –∏ –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞.`,
      tags: idx % 2 === 0 ? ['generic'] : ['meme'],
      conditions: cond,
      weight: 1 + (idx % 2),
      cooldownKey: null,
      locale: 'ru',
      isEnabled: true,
    });
  }

  return seeds.slice(0, 70);
}

async function seedThoughts() {
  console.log('üß† Seeding 70 thoughts into game_thoughts...');
  const seeds = buildSeeds();
  try {
    await db.insert(gameThoughts).values(seeds as any).onConflictDoNothing();
    console.log(`‚úÖ Inserted ${seeds.length} thoughts (existing skipped).`);
  } catch (e) {
    console.error('‚ùå Failed to seed thoughts:', e);
    throw e;
  } finally {
    await pool.end();
  }
}

seedThoughts();


